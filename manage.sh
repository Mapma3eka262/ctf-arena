#!/bin/bash
# manage.sh

set -e

PROJECT_DIR="/opt/ctf-arena"
BACKEND_DIR="$PROJECT_DIR/backend"

show_help() {
    echo "üöÄ CyberCTF Arena Management Script"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  start       - Start all services"
    echo "  stop        - Stop all services" 
    echo "  restart     - Restart all services"
    echo "  status      - Show services status"
    echo "  logs        - Show logs (all|api|websocket|celery)"
    echo "  backup      - Create database backup"
    echo "  update      - Update from git and restart"
    echo "  monitor     - Show real-time monitoring"
    echo "  shell       - Open Python shell"
    echo "  check       - Run system checks"
    echo "  help        - Show this help"
    echo ""
}

check_services() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [ ! -d "$PROJECT_DIR" ]; then
        echo "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $PROJECT_DIR"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ ! -f "$PROJECT_DIR/.env" ]; then
        echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    echo "‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
    return 0
}

start_services() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    systemctl start ctf-api ctf-websocket ctf-celery ctf-celery-beat
    echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

stop_services() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    systemctl stop ctf-api ctf-websocket ctf-celery ctf-celery-beat
    echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

restart_services() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    systemctl restart ctf-api ctf-websocket ctf-celery ctf-celery-beat
    echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo ""
    
    services=("ctf-api" "ctf-websocket" "ctf-celery" "ctf-celery-beat" "nginx" "postgresql" "redis-server")
    
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            echo "‚úÖ $service: –∞–∫—Ç–∏–≤–µ–Ω"
        else
            echo "‚ùå $service: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        fi
    done
    
    echo ""
    echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
    if curl -f http://localhost:8000/api/health > /dev/null 2>&1; then
        echo "‚úÖ API: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå API: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket..."
    if curl -f http://localhost:8001/health > /dev/null 2>&1; then
        echo "‚úÖ WebSocket: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ùå WebSocket: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

show_logs() {
    local service=${1:-"all"}
    
    case $service in
        "all")
            journalctl -u ctf-api -u ctf-websocket -u ctf-celery -f
            ;;
        "api")
            journalctl -u ctf-api -f
            ;;
        "websocket")
            journalctl -u ctf-websocket -f
            ;;
        "celery")
            journalctl -u ctf-celery -f
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: all, api, websocket, celery"
            ;;
    esac
}

create_backup() {
    echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="$PROJECT_DIR/backups/backup_$timestamp.sql"
    
    mkdir -p "$PROJECT_DIR/backups"
    
    sudo -u postgres pg_dump ctfarena > "$backup_file"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file"
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        cd "$PROJECT_DIR/backups"
        ls -t backup_*.sql | tail -n +8 | xargs -r rm
        echo "üßπ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –æ—á–∏—â–µ–Ω—ã"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
    fi
}

update_system() {
    echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    stop_services
    
    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_backup
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ git)
    # cd "$PROJECT_DIR"
    # git pull origin main
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    cd "$BACKEND_DIR"
    source venv/bin/activate
    pip install -r requirements/prod.txt
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    alembic upgrade head
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services
    
    echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

show_monitor() {
    echo "üìà –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    echo ""
    
    while true; do
        clear
        echo "üïê $(date)"
        echo ""
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        echo "üîß –°–µ—Ä–≤–∏—Å—ã:"
        for service in ctf-api ctf-websocket ctf-celery; do
            if systemctl is-active --quiet "$service"; then
                echo "  ‚úÖ $service"
            else
                echo "  ‚ùå $service"
            fi
        done
        
        echo ""
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        echo "üíæ –†–µ—Å—É—Ä—Å—ã:"
        echo "  CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}')%"
        echo "  RAM: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
        echo "  Disk: $(df -h / | awk 'NR==2 {print $5}')"
        
        echo ""
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        echo "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        echo "  HTTP: $(netstat -an | grep :80 | wc -l)"
        echo "  WebSocket: $(netstat -an | grep :8001 | wc -l)"
        
        sleep 5
    done
}

open_shell() {
    echo "üêç –ó–∞–ø—É—Å–∫ Python shell..."
    cd "$BACKEND_DIR"
    source venv/bin/activate
    python -c "
import os
import sys
sys.path.append('.')

from app.core.database import SessionLocal
from app.models.user import User
from app.models.team import Team
from app.models.challenge import Challenge

db = SessionLocal()

print('üöÄ CyberCTF Arena Python Shell')
print('–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: db, User, Team, Challenge')
print('–ü—Ä–∏–º–µ—Ä: db.query(User).count()')

from IPython import embed
embed()
"
}

run_checks() {
    echo "üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–∏—Å—Ç–µ–º—ã..."
    
    cd "$BACKEND_DIR"
    source venv/bin/activate
    python check_structure.py
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-}" in
    "start")
        check_services && start_services
        ;;
    "stop")
        stop_services
        ;;
    "restart")
        check_services && restart_services
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs "$2"
        ;;
    "backup")
        create_backup
        ;;
    "update")
        update_system
        ;;
    "monitor")
        show_monitor
        ;;
    "shell")
        open_shell
        ;;
    "check")
        run_checks
        ;;
    "help"|"")
        show_help
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
# backend/alembic.ini
# Alembic configuration file for CyberCTF Arena

# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want to use different pattern
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
timezone = Europe/Moscow

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# set to 'true' to enable reading .py files in the "versions" directory
# from the script_location, and then writing their digested form to the
# alembic_version table, to support migration file validation and other
# controls. Note that changing this value to true requires a one-time
# manual "stamp" operation to initialize the table, and also requires that
# all migration files be available at all times for re-verification.
# version_table_pk = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# sqlalchemy.url = driver://user:pass@localhost/dbname
sqlalchemy.url = postgresql://ctfuser:ctfpassword@localhost/ctfarena

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Custom configuration for CyberCTF Arena
[ctf_arena]
# Application name
app_name = CyberCTF Arena

# Database connection pool settings
db_pool_size = 20
db_max_overflow = 30
db_pool_timeout = 30
db_pool_recycle = 3600

# Migration settings
# Set to true to include schema names in autogenerate
# include_schemas = false

# Set to true to include object definitions in autogenerate
# include_object_definitions = false

# Version table name
version_table = alembic_version_ctf

# Version table schema
# version_table_schema =

# Additional context for migration generation
[context]
# Custom context variables available in migration scripts
app_version = 2.0.0
environment = production

# Post-generate hook configuration
[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79

# Lint with flake8 - use the console_scripts runner, against the "flake8" entrypoint
# hooks = flake8
# flake8.type = console_scripts
# flake8.entrypoint = flake8

# Format using "ruff" - use the console_scripts runner, against the "ruff" entrypoint
# hooks = ruff
# ruff.type = console_scripts
# ruff.entrypoint = ruff
# ruff.options = --fix

# Custom migration template (optional)
# [template]
# set to "true" to enable the custom template
# set to "false" to disable the custom template
# set to a path to use a custom template file
# tpl = false

# Custom migration template variables
# [template_vars]
# Custom variables available in migration templates
# project_name = CyberCTF Arena
# author_name = CTF Arena Team
# author_email = team@ctf-arena.local

# Performance optimization settings
[performance]
# Batch mode for large migrations
batch_mode = false

# Transaction mode
transaction_per_migration = true

# Lock timeout (seconds)
lock_timeout = 60

# Statement timeout (seconds)
statement_timeout = 300

# Development settings (overridden in production)
[dev:alembic]
# Development database URL
sqlalchemy.url = postgresql://ctfuser:ctfpassword@localhost/ctfarena_dev

[dev:loggers]
keys = root,sqlalchemy,alembic

[dev:logger_root]
level = INFO
handlers = console

[dev:logger_sqlalchemy]
level = INFO
handlers = console

[dev:logger_alembic]
level = DEBUG
handlers = console

# Testing settings
[test:alembic]
# Test database URL
sqlalchemy.url = postgresql://ctfuser:ctfpassword@localhost/ctfarena_test

[test:performance]
# Faster timeouts for tests
lock_timeout = 10
statement_timeout = 30

# Production settings
[prod:alembic]
# Production database URL (should be set via environment variable)
sqlalchemy.url = ${DATABASE_URL}

[prod:loggers]
keys = root,sqlalchemy,alembic

[prod:logger_root]
level = WARNING
handlers = console

[prod:logger_sqlalchemy]
level = WARNING
handlers = console

[prod:logger_alembic]
level = INFO
handlers = console

[prod:performance]
# More conservative timeouts for production
lock_timeout = 120
statement_timeout = 600

# Custom configuration sections for CyberCTF Arena components
[models]
# Model configuration
user_table = users
team_table = teams
challenge_table = challenges
submission_table = submissions

[security]
# Security settings for migrations
enable_audit = true
log_migrations = true

[backup]
# Backup configuration
pre_migration_backup = true
post_migration_backup = true
backup_path = /opt/ctf-arena/backups/migrations

# Migration hooks configuration
[hooks]
# Pre-upgrade hooks (scripts to run before migration)
pre_upgrade = 
    # Example: pre_upgrade = scripts/backup_database.py

# Post-upgrade hooks (scripts to run after successful migration)
post_upgrade = 
    # Example: post_upgrade = scripts/update_cache.py

# Pre-downgrade hooks (scripts to run before downgrade)
pre_downgrade = 
    # Example: pre_downgrade = scripts/backup_database.py

# Post-downgrade hooks (scripts to run after successful downgrade)
post_downgrade = 
    # Example: post_downgrade = scripts/update_cache.py

# Error handling configuration
[errors]
# Maximum number of retries for failed migrations
max_retries = 3

# Retry delay in seconds
retry_delay = 5

# Continue on error (dangerous - use with caution)
continue_on_error = false

# Custom migration policies
[policies]
# Policy for handling column type changes
column_type_changes = warn

# Policy for handling table drops
table_drops = warn

# Policy for handling data migrations
data_migrations = require_manual

# Policy for handling constraint changes
constraint_changes = warn
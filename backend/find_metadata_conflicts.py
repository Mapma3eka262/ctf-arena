#!/usr/bin/env python3
# backend/find_metadata_conflicts.py

import os
import re
import ast

def find_metadata_conflicts():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–ª–µ–º 'metadata'"""
    models_dir = "app/models"
    
    conflicts = []
    
    for filename in os.listdir(models_dir):
        if filename.endswith(".py") and filename != "__init__.py":
            filepath = os.path.join(models_dir, filename)
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò—â–µ–º –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–µ—Å—è –æ—Ç Base
            tree = ast.parse(content)
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ metadata
                    for item in node.body:
                        if (isinstance(item, ast.AnnAssign) and 
                            isinstance(item.target, ast.Name) and 
                            item.target.id == 'metadata'):
                            conflicts.append((filename, node.name))
                            break
                            
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                    if re.search(rf'class {node.name}\(.*Base.*\):', content):
                        if re.search(rf'^\s*metadata\s*:', content, re.MULTILINE):
                            if (filename, node.name) not in conflicts:
                                conflicts.append((filename, node.name))
    
    return conflicts

if __name__ == "__main__":
    print("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∏–º–µ–Ω 'metadata' –≤ –º–æ–¥–µ–ª—è—Ö...")
    conflicts = find_metadata_conflicts()
    
    if conflicts:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:")
        for filename, classname in conflicts:
            print(f"   - {filename}: {classname}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

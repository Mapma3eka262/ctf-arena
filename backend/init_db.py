# backend/init_db.py
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CyberCTF Arena
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import init_db, check_db_connection
from app.core.config import settings

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CyberCTF Arena...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    if not check_db_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   URL: {settings.DATABASE_URL}")
        sys.exit(1)
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    try:
        init_db()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        create_test_data()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüë§ –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
    print("   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123")
    print("   (–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞)")

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from sqlalchemy.orm import Session
    from app.core.database import SessionLocal
    from app.models.user import User
    from app.models.team import Team
    from app.models.challenge import Challenge
    from app.models.service import Service
    from app.core.security import get_password_hash
    
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        team = Team(name="Test Team", score=0)
        db.add(team)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = User(
            username="admin",
            email="admin@ctf-arena.local",
            hashed_password=get_password_hash("admin123"),
            is_admin=True,
            is_captain=True,
            team_id=team.id,
            is_active=True
        )
        db.add(admin_user)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        challenges = [
            Challenge(
                title="Welcome Challenge",
                description="–ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –ù–∞–π–¥–∏—Ç–µ —Ñ–ª–∞–≥ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.",
                category="MISC",
                difficulty="easy",
                points=50,
                flag="CTF{w3lc0m3_t0_ctf_4r3n4}",
                hint="–§–ª–∞–≥ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –≤–∞–º–∏!",
                is_active=True,
                is_visible=True
            ),
            Challenge(
                title="Web Security 101",
                description="–ë–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.",
                category="WEB",
                difficulty="easy",
                points=100,
                flag="CTF{w3b_s3cur1ty_b4s1c5}",
                hint="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥",
                is_active=True,
                is_visible=True
            ),
            Challenge(
                title="Crypto Challenge",
                description="–ó–∞–¥–∞–Ω–∏–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
                category="CRYPTO",
                difficulty="easy",
                points=100,
                flag="CTF{cryp70_b4s1c5}",
                hint="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
                is_active=True,
                is_visible=True
            ),
            Challenge(
                title="Forensics Investigation",
                description="–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–ª–∏–∫. –ù–∞–π–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                category="FORENSICS",
                difficulty="medium",
                points=200,
                flag="CTF{f0r3ns1c5_m4st3r}",
                hint="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤",
                is_active=True,
                is_visible=True
            ),
            Challenge(
                title="Reverse Engineering",
                description="–û–±—Ä–∞—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–æ–¥–∞.",
                category="REVERSING",
                difficulty="hard",
                points=300,
                flag="CTF{r3v3rs3_3ng1n33r1ng}",
                hint="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∑–∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
                is_active=True,
                is_visible=True
            )
        ]
        
        for challenge in challenges:
            db.add(challenge)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        services = [
            Service(
                name="CTF API",
                type="web",
                host="localhost",
                port=8000,
                check_endpoint="/api/health",
                expected_status=200,
                is_active=True
            ),
            Service(
                name="PostgreSQL",
                type="database",
                host="localhost",
                port=5432,
                is_active=True
            ),
            Service(
                name="Redis",
                type="database", 
                host="localhost",
                port=6379,
                is_active=True
            ),
            Service(
                name="WebSocket Server",
                type="web",
                host="localhost", 
                port=8001,
                check_endpoint="/health",
                expected_status=200,
                is_active=True
            )
        ]
        
        for service in services:
            db.add(service)
        
        db.commit()
        
    except Exception as e:
        db.rollback()
        raise e
    finally:
        db.close()

if __name__ == "__main__":
    main()
# backend/app/services/dynamic_worker.py
import asyncio
import logging
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.services.dynamic_service import DynamicChallengeService

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DynamicChallengeWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.db = SessionLocal()
        self.dynamic_service = DynamicChallengeService(self.db)
        self.running = True
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Dynamic Challenge Worker")
        
        try:
            while self.running:
                await self.process_tasks()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        finally:
            self.db.close()
    
    async def process_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≤–æ—Ä–∫–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
            await self.dynamic_service.health_check_instances()
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
            await self.dynamic_service.cleanup_expired_instances()
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self.log_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á: {e}")
    
    async def log_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from app.models.dynamic_challenge import ChallengeInstance
        
        total_instances = self.db.query(ChallengeInstance).count()
        running_instances = self.db.query(ChallengeInstance).filter(
            ChallengeInstance.status == "running"
        ).count()
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: {running_instances}/{total_instances} –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Dynamic Challenge Worker")

async def main():
    worker = DynamicChallengeWorker()
    try:
        await worker.start()
    except KeyboardInterrupt:
        worker.stop()

if __name__ == "__main__":
    asyncio.run(main())
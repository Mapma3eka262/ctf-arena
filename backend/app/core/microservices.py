# backend/app/core/microservices.py
from typing import Dict, Any, List
import asyncio
from abc import ABC, abstractmethod

class BaseMicroservice(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    @abstractmethod
    async def check_health(self) -> Dict[str, Any]:
        pass
    
    @abstractmethod
    async def initialize(self):
        pass
    
    @abstractmethod
    async def shutdown(self):
        pass

class AuthService(BaseMicroservice):
    async def check_health(self) -> Dict[str, Any]:
        return {"status": "healthy", "service": "auth"}
    
    async def initialize(self):
        print("üõ°Ô∏è Auth Service initialized")
    
    async def shutdown(self):
        print("üõ°Ô∏è Auth Service shutdown")

class ScoringService(BaseMicroservice):
    async def check_health(self) -> Dict[str, Any]:
        return {"status": "healthy", "service": "scoring"}
    
    async def initialize(self):
        print("üèÜ Scoring Service initialized")
    
    async def shutdown(self):
        print("üèÜ Scoring Service shutdown")

class MicroserviceManager:
    def __init__(self):
        self.services: Dict[str, BaseMicroservice] = {}
    
    def register_service(self, name: str, service: BaseMicroservice):
        self.services[name] = service
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        tasks = [service.initialize() for service in self.services.values()]
        await asyncio.gather(*tasks)
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        tasks = [service.shutdown() for service in self.services.values()]
        await asyncio.gather(*tasks)
    
    async def health_check(self) -> Dict[str, Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        tasks = {name: service.check_health() for name, service in self.services.items()}
        results = {}
        for name, task in tasks.items():
            try:
                results[name] = await task
            except Exception as e:
                results[name] = {"status": "error", "error": str(e)}
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
microservice_manager = MicroserviceManager()
# backend/app/main.py
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import asyncio

from app.core.config import settings
from app.core.database import init_db
from app.core.microservices import microservice_manager, AuthService, ScoringService
from app.api.websocket import manager as websocket_manager
from app.plugins import plugin_manager
from app.utils.docker_manager import DockerManager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ CyberCTF Arena...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
    microservice_manager.register_service("auth", AuthService())
    microservice_manager.register_service("scoring", ScoringService())
    await microservice_manager.initialize()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
    plugin_modules = plugin_manager.discover_plugins()
    for module in plugin_modules:
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            if (isinstance(attr, type) and 
                attr_name.endswith('Plugin') and 
                attr_name != 'BasePlugin'):
                plugin_manager.load_plugin(attr)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    docker_manager = DockerManager()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(background_tasks())
    
    print(f"‚úÖ {settings.APP_NAME} v{settings.APP_VERSION} –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CyberCTF Arena...")
    
    await websocket_manager.disconnect_all()
    await microservice_manager.shutdown()
    
    # –í—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
    for plugin_name in list(plugin_manager.loaded_plugins.keys()):
        plugin_manager.unload_plugin(plugin_name)
    
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def background_tasks():
    """–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            health_status = await microservice_manager.health_check()
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await cleanup_old_data()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await update_system_stats()
            
            await asyncio.sleep(30)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
            await asyncio.sleep(60)

async def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    pass

async def update_system_stats():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    pass

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="CTF –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–∏–±–µ—Ä—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
from app.api import (
    auth, users, teams, challenges, submissions, 
    admin, monitoring, websocket, dynamic_challenges,
    notifications, analytics
)

app.include_router(auth.router, prefix="/api/auth", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
app.include_router(users.router, prefix="/api/users", tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
app.include_router(teams.router, prefix="/api/teams", tags=["–ö–æ–º–∞–Ω–¥—ã"])
app.include_router(challenges.router, prefix="/api/challenges", tags=["–ó–∞–¥–∞–Ω–∏—è"])
app.include_router(submissions.router, prefix="/api/submissions", tags=["–û—Ç–ø—Ä–∞–≤–∫–∏"])
app.include_router(admin.router, prefix="/api/admin", tags=["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"])
app.include_router(monitoring.router, prefix="/api/monitoring", tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])
app.include_router(websocket.router, prefix="/api/ws", tags=["WebSocket"])
app.include_router(dynamic_challenges.router, prefix="/api/dynamic", tags=["–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"])
app.include_router(notifications.router, prefix="/api/notifications", tags=["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
app.include_router(analytics.router, prefix="/api/analytics", tags=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {settings.APP_NAME}",
        "version": settings.APP_VERSION,
        "docs": "/api/docs",
        "status": "running"
    }

@app.get("/api/health")
async def health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    from app.core.cache import cache_manager
    from app.core.database import engine
    import psutil
    import os
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_status = "healthy"
    try:
        with engine.connect() as conn:
            conn.execute("SELECT 1")
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    cache_status = "healthy"
    try:
        cache_manager.set("health_check", "test", 10)
        if cache_manager.get("health_check") != "test":
            cache_status = "error"
    except Exception as e:
        cache_status = f"error: {str(e)}"
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    system_metrics = {
        "memory_usage": f"{psutil.virtual_memory().percent:.1f}%",
        "cpu_usage": f"{psutil.cpu_percent()}%",
        "disk_usage": f"{psutil.disk_usage('/').percent:.1f}%",
        "process_memory": f"{psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024:.1f} MB"
    }
    
    return {
        "status": "healthy",
        "timestamp": "2024-01-01T00:00:00Z",
        "version": settings.APP_VERSION,
        "services": {
            "database": db_status,
            "cache": cache_status,
            "microservices": await microservice_manager.health_check(),
            "websocket": {
                "active_connections": len(websocket_manager.active_connections),
                "connected_teams": len(websocket_manager.team_connections)
            }
        },
        "system": system_metrics,
        "plugins": {
            "loaded": len(plugin_manager.loaded_plugins),
            "list": plugin_manager.get_loaded_plugins()
        }
    }

@app.exception_handler(404)
async def not_found_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=404,
        content={"detail": "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    )

@app.exception_handler(500)
async def internal_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=500,
        content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG
    )
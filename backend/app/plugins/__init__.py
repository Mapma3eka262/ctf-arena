from typing import Dict, List, Any, Optional
import importlib
import pkgutil
import os
import asyncio

class PluginManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è CTF-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    
    def __init__(self):
        self.plugins: Dict[str, Any] = {}
        self.loaded_plugins: Dict[str, Any] = {}
    
    def discover_plugins(self, plugins_dir: str = "app/plugins"):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        plugin_modules = []
        
        for finder, name, ispkg in pkgutil.iter_modules([plugins_dir]):
            if name.startswith("plugin_") or name.endswith("_plugin"):
                try:
                    module = importlib.import_module(f"app.plugins.{name}")
                    plugin_modules.append(module)
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞–≥–∏–Ω: {name}")
                except ImportError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {name}: {e}")
        
        return plugin_modules
    
    async def load_plugin(self, plugin_class):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            plugin_instance = plugin_class()
            self.loaded_plugins[plugin_instance.name] = plugin_instance
            await plugin_instance.on_plugin_load()
            print(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_instance.name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            return plugin_instance
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {plugin_class.__name__}: {e}")
            return None
    
    async def unload_plugin(self, plugin_name: str):
        """–í—ã–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–∞"""
        if plugin_name in self.loaded_plugins:
            plugin = self.loaded_plugins[plugin_name]
            await plugin.on_plugin_unload()
            del self.loaded_plugins[plugin_name]
            print(f"‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_name} –≤—ã–≥—Ä—É–∂–µ–Ω")
    
    async def execute_hook(self, hook_name: str, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö—É–∫–∞ –≤–æ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö"""
        for plugin_name, plugin in self.loaded_plugins.items():
            if hasattr(plugin, hook_name):
                try:
                    hook_method = getattr(plugin, hook_name)
                    if callable(hook_method):
                        await hook_method(*args, **kwargs)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—É–∫–∞ {hook_name} –≤ –ø–ª–∞–≥–∏–Ω–µ {plugin_name}: {e}")
    
    def get_loaded_plugins(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        return [
            {
                "name": plugin.name,
                "version": plugin.version,
                "description": plugin.description
            }
            for plugin in self.loaded_plugins.values()
        ]
    
    async def get_plugin_config(self, plugin_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        if plugin_name in self.loaded_plugins:
            return await self.loaded_plugins[plugin_name].get_plugin_config()
        return None
    
    async def set_plugin_config(self, plugin_name: str, config: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        if plugin_name in self.loaded_plugins:
            await self.loaded_plugins[plugin_name].set_plugin_config(config)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
plugin_manager = PluginManager()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
async def initialize_plugins():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤"""
    try:
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
        plugin_modules = plugin_manager.discover_plugins()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        for module in plugin_modules:
            # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ –º–æ–¥—É–ª–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã)
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if (isinstance(attr, type) and 
                    hasattr(attr, 'name') and 
                    hasattr(attr, 'version') and
                    hasattr(attr, 'on_plugin_load') and
                    not attr.__name__.startswith('Base')):
                    try:
                        await plugin_manager.load_plugin(attr)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {attr.__name__}: {e}")
        
        print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(plugin_manager.loaded_plugins)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def start_plugin_initialization():
    """–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    await initialize_plugins()

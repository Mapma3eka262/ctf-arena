from celery import shared_task
import smtplib
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
import logging
from sqlalchemy.orm import Session

from app.tasks.celery import get_db
from app.core.config import settings

logger = logging.getLogger(__name__)

@shared_task
def send_verification_email(user_id: int, verification_token: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            logger.error(f"User {user_id} not found for email verification")
            return
        
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email - CyberCTF Arena"
        body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username}!
        
        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ CyberCTF Arena –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email.
        
        –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_token}
        
        –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
        {settings.FRONTEND_URL}/verify-email?token={verification_token}
        
        –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """
        
        send_email(user.email, subject, body)
        logger.info(f"Verification email sent to {user.email}")
        
    except Exception as e:
        logger.error(f"Failed to send verification email: {e}")
    finally:
        db.close()

@shared_task
def send_password_reset_email(user_id: int, reset_token: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        db = next(get_db())
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            logger.error(f"User {user_id} not found for password reset")
            return
        
        subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - CyberCTF Arena"
        body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.username}!
        
        –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
        {settings.FRONTEND_URL}/reset-password?token={reset_token}
        
        –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
        
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """
        
        send_email(user.email, subject, body)
        logger.info(f"Password reset email sent to {user.email}")
        
    except Exception as e:
        logger.error(f"Failed to send password reset email: {e}")
    finally:
        db.close()

@shared_task
def send_team_invitation(invite_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É"""
    try:
        db = next(get_db())
        invite = db.query(TeamInvite).filter(TeamInvite.id == invite_id).first()
        if not invite:
            logger.error(f"Invite {invite_id} not found")
            return
        
        team = invite.team
        invited_by = db.query(User).filter(User.id == invite.invited_by).first()
        
        subject = f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É {team.name} - CyberCTF Arena"
        body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ "{team.name}" –æ—Ç {invited_by.username}.
        
        –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
        {settings.FRONTEND_URL}/accept-invite?token={invite.token}
        
        –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
        """
        
        send_email(invite.email, subject, body)
        logger.info(f"Team invitation sent to {invite.email}")
        
    except Exception as e:
        logger.error(f"Failed to send team invitation: {e}")
    finally:
        db.close()

@shared_task
def send_submission_result(submission_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞"""
    try:
        db = next(get_db())
        submission = db.query(Submission).filter(Submission.id == submission_id).first()
        if not submission:
            logger.error(f"Submission {submission_id} not found")
            return
        
        user = submission.user
        challenge = submission.challenge
        
        subject = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ - CyberCTF Arena"
        
        if submission.status == 'accepted':
            body = f"""
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user.username}!
            
            –í–∞—à —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è "{challenge.title}" –ø—Ä–∏–Ω—è—Ç!
            
            –ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: {submission.points_awarded}
            {"üéâ –ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å! üéâ" if submission.is_first_blood else ""}
            
            –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã: {submission.team.score}
            """
        else:
            body = f"""
            {user.username}, –≤–∞—à —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è "{challenge.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω.
            
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!
            """
        
        send_email(user.email, subject, body)
        logger.info(f"Submission result email sent to {user.email}")
        
    except Exception as e:
        logger.error(f"Failed to send submission result: {e}")
    finally:
        db.close()

def send_email(to_email: str, subject: str, body: str):
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    try:
        if not all([settings.SMTP_SERVER, settings.SMTP_USERNAME, settings.SMTP_PASSWORD]):
            logger.warning("Email configuration missing, skipping email send")
            return
        
        message = MimeMultipart()
        message['From'] = settings.FROM_EMAIL
        message['To'] = to_email
        message['Subject'] = subject
        
        message.attach(MimeText(body, 'plain'))
        
        with smtplib.SMTP(settings.SMTP_SERVER, settings.SMTP_PORT) as server:
            server.starttls()
            server.login(settings.SMTP_USERNAME, settings.SMTP_PASSWORD)
            server.send_message(message)
            
    except Exception as e:
        logger.error(f"Email sending failed: {e}")
        raise